// Configuration Groq
const GROQ_API_KEY = "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";
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";
const MODEL = "meta-llama/llama-4-scout-17b-16e-instruct";

// Variables pour g√©rer les limites d'API
let apiErrorCount = 0;
let lastApiCall = 0;
const API_COOLDOWN = 2000; // 2 secondes entre les appels

// Type de t√¢che s√©lectionn√©
let currentTaskType = "cours";

// Prompts optimis√©s pour chaque type de t√¢che
const TASK_PROMPTS = {
  cours: `R√©dige un cours complet sur le sujet : "{sujet}".
Structure : Introduction, I. Grand titre, 1. Petit titre, Texte, ..., Conclusion.
Chaque grand titre doit avoir exactement trois petits titres avec arguments d√©taill√©s et exemples.
Langage clair et p√©dagogique, adapt√© pour un lyc√©en.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  explication: `Explique le sujet : "{sujet}" pour un √©l√®ve de lyc√©e.
Utilise des phrases simples et courtes.
Illustre chaque id√©e par un exemple concret.
Structure en sections claires.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  exercices: `Cr√©e 5 exercices sur : "{sujet}".
Chaque exercice doit avoir une r√©ponse d√©taill√©e avec explication de la m√©thode.
Format structur√© avec √©nonc√©s clairs et solutions compl√®tes.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  resume: `R√©sume le texte ou le sujet : "{sujet}".
Structure : Introduction, Points cl√©s, Conclusion.
Texte clair, concis, adapt√© pour r√©vision rapide.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  qcm: `Cr√©e un QCM de 5 questions sur : "{sujet}".
4 options (A, B, C, D) par question.
Indique la bonne r√©ponse et explique pourquoi.
Format interactif et p√©dagogique.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  dissertation: `R√©dige une dissertation sur : "{sujet}".
Introduction : enjeux et probl√©matique.
D√©veloppement : I, II, III grands titres avec 3 sous-titres chacun (arguments + exemples).
Conclusion : r√©sum√© et ouverture.
Structure acad√©mique compl√®te.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  correction: `Corrige le texte : "{sujet}".
Orthographe, grammaire, ponctuation.
Explique les corrections et sugg√®re des am√©liorations.
Sois bienveillant et p√©dagogique.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  maths: `Cr√©e 5 exercices de math√©matiques sur : "{sujet}".
Chaque exercice avec √©nonc√© et solution d√©taill√©e.
Fournis les √©tapes de raisonnement clairement.
Adapt√© au niveau lyc√©e.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`,

  fiche: `Cr√©e une fiche de r√©vision sur : "{sujet}".
Points cl√©s r√©sum√©s en 5 sections principales.
Chaque point cl√© expliqu√© en une phrase et un exemple.
Format condens√© et efficace.
Utilise des balises HTML s√©mantiques sans symboles Markdown.`
};

// √âl√©ments DOM
const chatMessages = document.getElementById("chatMessages");
const messageInput = document.getElementById("messageInput");
const uploadBtn = document.getElementById("uploadBtn");
const fileInput = document.getElementById("fileInput");
const sendBtn = document.getElementById("sendBtn");
const taskSelector = document.getElementById("taskSelector");
const forfaitInfo = document.getElementById("forfaitInfo");
const quotaCounter = document.getElementById("quotaCounter");
const forfaitName = document.getElementById("forfaitName");

// Historique des messages avec prompt syst√®me int√©gr√©
let messageHistory = [
  {
    role: "system",
    content: `Tu es "Professeur ClassePro", un assistant √©ducatif qui aide les √©l√®ves √† r√©viser leurs cours et √† comprendre leurs le√ßons. Tu expliques avec des mots simples et tu proposes des exercices interactifs.

TON IDENTIT√â:
Tu es "Professeur ClassePro", un enseignant patient, clair et structur√©.
Tu as √©t√© con√ßu par l'√©quipe ClassePro pour aider les √©l√®ves.
Tu es sp√©cialis√© dans l'explication p√©dagogique et l'accompagnement scolaire.

M√âTHODE P√âDAGOGIQUE:
Tu pr√©sentes toujours les cours avec une organisation logique : introduction, d√©veloppement structur√©, exemples concrets, conclusion claire.
Tu n'utilises JAMAIS les symboles **, ###, ##, #, --, ou tout autre signe de mise en forme Markdown.
Tu utilises le gras HTML <strong> pour mettre en valeur les termes importants.
Tu √©cris toujours dans un fran√ßais acad√©mique adapt√© aux √©l√®ves du coll√®ge ou du lyc√©e.
Tu expliques avec des mots simples, puis tu approfondis avec des exemples.

R√àGLES STRICTES DE MISE EN FORME:
Tu ne dois JAMAIS utiliser **texte** pour le gras.
Tu ne dois JAMAIS utiliser ###, ##, # pour les titres.
Tu ne dois JAMAIS utiliser -- ou --- pour les s√©parateurs.
Tu utilises <strong>texte</strong> pour mettre en valeur les termes importants.
Tu structures ton texte avec des titres clairs sans symboles.
Tu utilises des paragraphes a√©r√©s et bien organis√©s.
Tu adaptes ton langage au niveau de l'√©l√®ve.
Tu es patient et encourageant dans tes explications.
Tu utilises des exemples concrets et des analogies simples.

Maintenant, accueille l'√©l√®ve comme le Professeur ClassePro.`
  },
  {
    role: "assistant",
    content: "Bonjour ! üëã Je suis votre Professeur ClassePro. Je suis l√† pour vous aider √† r√©viser vos cours, comprendre vos le√ßons et progresser dans vos apprentissages. \n\nS√©lectionnez le type de contenu que vous souhaitez g√©n√©rer :\n‚Ä¢ Cours complet - Structure d√©taill√©e avec exemples\n‚Ä¢ Explication simplifi√©e - Pour comprendre facilement\n‚Ä¢ Exercices avec corrig√©s - Pour s'entra√Æner\n‚Ä¢ R√©sum√© - Pour r√©viser rapidement\n‚Ä¢ QCM interactif - Pour tester ses connaissances\n‚Ä¢ Dissertation/Expos√© - Structure acad√©mique compl√®te\n‚Ä¢ Correction de texte - Am√©lioration orthographe/grammaire\n‚Ä¢ Exercices de maths - Avec solutions d√©taill√©es\n‚Ä¢ Fiche de r√©vision - Points cl√©s essentiels\n\nQuelle mati√®re ou quel sujet souhaitez-vous travailler aujourd'hui ?"
  }
];

// üîê FONCTIONS DE GESTION DES QUOTAS ET FORFAITS

function verifierAccesIA() {
  const forfait = JSON.parse(localStorage.getItem("classepro_forfait"));
  const aujourdHui = new Date().toDateString();

  // V√©rifier si un forfait existe
  if (!forfait) {
    return { 
      ok: false, 
      message: "‚ùå Aucun forfait actif. Veuillez souscrire √† un forfait pour utiliser l'IA.",
      questionsRestantes: 0
    };
  }

  // V√©rifier si le forfait est expir√©
  if (new Date(forfait.dateFin) < new Date()) {
    return { 
      ok: false, 
      message: "‚è≥ Votre abonnement a expir√©. Veuillez renouveler votre forfait.",
      questionsRestantes: 0
    };
  }

  // R√©initialiser le compteur chaque jour
  if (forfait.derniereDate !== aujourdHui) {
    forfait.questionsJour = 0;
    forfait.derniereDate = aujourdHui;
    localStorage.setItem("classepro_forfait", JSON.stringify(forfait));
  }

  // V√©rifier si le quota quotidien est atteint
  if (forfait.questionsJour >= forfait.quota) {
    return { 
      ok: false, 
      message: "üö´ Quota quotidien atteint. R√©essayez demain √† minuit.",
      questionsRestantes: 0
    };
  }

  // Calculer les questions restantes
  const questionsRestantes = forfait.quota - forfait.questionsJour;

  return { 
    ok: true, 
    message: "Autoris√©",
    questionsRestantes: questionsRestantes,
    forfait: forfait
  };
}

function incrementerQuestion() {
  const forfait = JSON.parse(localStorage.getItem("classepro_forfait"));
  if (forfait) {
    forfait.questionsJour++;
    localStorage.setItem("classepro_forfait", JSON.stringify(forfait));
    
    // Retourner le nouveau nombre de questions restantes
    return forfait.quota - forfait.questionsJour;
  }
  return 0;
}

function mettreAJourAffichageForfait() {
  const acces = verifierAccesIA();
  
  if (!acces.ok) {
    // Aucun forfait actif ou forfait expir√©
    quotaCounter.textContent = "‚ùå Aucun forfait";
    forfaitName.textContent = "Souscrire pour utiliser l'IA";
    forfaitInfo.classList.add('no-forfait');
    forfaitInfo.classList.remove('quota-warning', 'quota-danger');
    return;
  }

  // Forfait actif
  const questionsRestantes = acces.questionsRestantes;
  
  // Mettre √† jour le compteur avec des couleurs selon le niveau
  quotaCounter.textContent = `${questionsRestantes} question(s) restante(s)`;
  forfaitName.textContent = `Forfait ${acces.forfait.nom}`;
  
  // Appliquer les styles selon le nombre de questions restantes
  forfaitInfo.classList.remove('no-forfait', 'quota-warning', 'quota-danger');
  
  if (questionsRestantes <= 3) {
    quotaCounter.classList.add('quota-danger');
  } else if (questionsRestantes <= 5) {
    quotaCounter.classList.add('quota-warning');
  }
}

// Initialiser le scroll vers le bas
scrollToBottom();

// Gestion de la s√©lection du type de t√¢che
taskSelector.addEventListener("click", (e) => {
  if (e.target.classList.contains("task-btn")) {
    // Retirer la classe active de tous les boutons
    document.querySelectorAll(".task-btn").forEach(btn => {
      btn.classList.remove("active");
    });
    
    // Ajouter la classe active au bouton cliqu√©
    e.target.classList.add("active");
    
    // Mettre √† jour le type de t√¢che courant
    currentTaskType = e.target.dataset.type;
    
    // Mettre √† jour le placeholder
    updatePlaceholder();
  }
});

// Fonction pour mettre √† jour le placeholder en fonction du type de t√¢che
function updatePlaceholder() {
  const placeholders = {
    cours: "Entrez le sujet du cours (ex: R√©volution fran√ßaise)...",
    explication: "Entrez le concept √† expliquer (ex: Photosynth√®se)...",
    exercices: "Entrez le th√®me des exercices (ex: Equations du second degr√©)...",
    resume: "Collez le texte √† r√©sumer ou le sujet...",
    qcm: "Entrez le th√®me du QCM (ex: Grammaire fran√ßaise)...",
    dissertation: "Entrez le sujet de dissertation (ex: La libert√©)...",
    correction: "Collez le texte √† corriger...",
    maths: "Entrez le chapitre math√©matique (ex: Trigonom√©trie)...",
    fiche: "Entrez le sujet de la fiche (ex: Cellule vivante)..."
  };
  
  messageInput.placeholder = placeholders[currentTaskType] || "Indiquez le sujet, le texte ou l'URL...";
}

// Initialiser le placeholder
updatePlaceholder();

// Gestion de l'envoi du message
sendBtn.addEventListener("click", sendMessage);

// La touche Entr√©e fait un saut de ligne, Ctrl+Entr√©e envoie le message
messageInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") {
    if (e.ctrlKey) {
      // Ctrl+Entr√©e envoie le message
      e.preventDefault();
      sendMessage();
    } else {
      // Entr√©e seule fait un saut de ligne
      // Comportement par d√©faut pr√©serv√©
    }
  }
});

// Gestion du bouton d'upload
uploadBtn.addEventListener("click", () => fileInput.click());

// Gestion de la s√©lection de fichiers
fileInput.addEventListener("change", () => {
  const files = fileInput.files;
  if (files.length > 0) {
    for (let i = 0; i < files.length; i++) {
      displayFile(files[i]);
    }
    fileInput.value = "";
  }
});

// Fonction pour envoyer un message
async function sendMessage() {
  const userMessage = messageInput.value.trim();
  if (userMessage) {
    // üîê V√âRIFICATION DE L'ACC√àS AVANT ENVOI
    const acces = verifierAccesIA();
    if (!acces.ok) {
      addMessage(acces.message, "bot");
      return;
    }

    // Formater le message avec le prompt de la t√¢che s√©lectionn√©e
    const taskPrompt = TASK_PROMPTS[currentTaskType].replace("{sujet}", userMessage);
    const finalMessage = `[T√¢che: ${currentTaskType}] ${taskPrompt}`;
    
    addMessage(userMessage, "user");
    messageInput.value = "";
    resetTextareaHeight();

    // Ajouter le message format√© √† l'historique
    messageHistory.push({ role: "user", content: finalMessage });

    // V√©rifier le cooldown de l'API
    const now = Date.now();
    if (now - lastApiCall < API_COOLDOWN) {
      const waitTime = API_COOLDOWN - (now - lastApiCall);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    // Afficher l'indicateur de frappe
    const typingIndicator = addTypingIndicator();

    try {
      // Appeler l'API Groq
      lastApiCall = Date.now();
      const response = await callGroqAPI(finalMessage);
      
      // Supprimer l'indicateur de frappe
      if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.parentNode.remove();
      }
      
      if (response) {
        // Ajouter la r√©ponse √† l'historique et l'afficher
        messageHistory.push({ role: "assistant", content: response });
        addMessage(response, "bot");
        apiErrorCount = 0; // R√©initialiser le compteur d'erreurs
        
        // üîÑ INCR√âMENTER LE COMPTEUR DE QUESTIONS
        const nouvellesQuestionsRestantes = incrementerQuestion();
        mettreAJourAffichageForfait();
        
      } else {
        throw new Error("Aucune r√©ponse de l'API Groq");
      }
    } catch (error) {
      console.error("Erreur:", error);
      apiErrorCount++;
      
      // Supprimer l'indicateur de frappe en cas d'erreur
      if (typingIndicator && typingIndicator.parentNode) {
        typingIndicator.parentNode.remove();
      }
      
      handleGenericError(userMessage);
    }
  }
}

// Fonction pour appeler l'API Groq
async function callGroqAPI(userPrompt) {
  try {
    const response = await fetch(GROQ_API_URL, {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${GROQ_API_KEY}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        model: MODEL,
        messages: messageHistory,
        temperature: 0.7,
        max_tokens: 4096
      })
    });

    if (!response.ok) {
      throw new Error(`Erreur API Groq: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();

    if (data.error) {
      console.error("Erreur API Groq :", data.error.message);
      return null;
    }

    return data.choices[0].message.content.trim();
    
  } catch (error) {
    console.error("Erreur lors de l'appel √† Groq :", error);
    throw error;
  }
}

// Fonction pour g√©rer les erreurs g√©n√©riques
function handleGenericError(originalMessage) {
  const errorMsg = document.createElement("div");
  errorMsg.classList.add("message", "bot");
  errorMsg.innerHTML = `
    <div class="bot-message-content">
      <div style="background: #ffe6e6; border: 1px solid #ffcccc; color: #cc0000; padding: 10px; border-radius: 8px; margin: 10px 0;">
        <strong>Probl√®me de connexion</strong><br>
        Impossible de contacter le service pour le moment. 
        Voici une r√©ponse g√©n√©r√©e localement :<br><br>
        <strong>En tant que Professeur ClassePro</strong>, je rencontre des difficult√©s techniques. 
        ${generateFallbackResponse(originalMessage)}
        <br><br>
        <button class="retry-btn" onclick="retryLastMessage()" style="background: linear-gradient(135deg, #3D3B8E, #FF7E5F); color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin-top: 10px; font-weight: bold;">R√©essayer</button>
      </div>
    </div>
  `;
  chatMessages.appendChild(errorMsg);
  scrollToBottom();
}

// Fonction pour reg√©n√©rer une r√©ponse de secours
function generateFallbackResponse(message) {
  const taskTitles = {
    cours: "cours complet",
    explication: "explication simplifi√©e",
    exercices: "exercices avec corrig√©s",
    resume: "r√©sum√©",
    qcm: "QCM interactif",
    dissertation: "dissertation",
    correction: "correction de texte",
    maths: "exercices de maths",
    fiche: "fiche de r√©vision"
  };
  
  return `Je pr√©pare ${taskTitles[currentTaskType]} sur "${message}". Une fois le service r√©tabli, je pourrai vous fournir un contenu structur√© et p√©dagogique. En attendant, vous pouvez reformuler votre demande ou essayer un autre type de contenu.`;
}

// Fonction pour r√©essayer le dernier message
window.retryLastMessage = function() {
  // Supprimer le message d'erreur
  const lastMessage = chatMessages.lastChild;
  if (lastMessage && lastMessage.querySelector('.error-message')) {
    lastMessage.remove();
  }
  
  // R√©essayer d'envoyer le dernier message utilisateur
  const lastUserMessage = messageHistory[messageHistory.length - 1];
  if (lastUserMessage && lastUserMessage.role === 'user') {
    sendMessageToAPI(lastUserMessage.content);
  }
};

// Fonction pour envoyer un message √† l'API (s√©par√©e pour la r√©utilisation)
async function sendMessageToAPI(message) {
  const typingIndicator = addTypingIndicator();
  
  try {
    lastApiCall = Date.now();
    const response = await callGroqAPI(message);
    
    if (typingIndicator && typingIndicator.parentNode) {
      typingIndicator.parentNode.remove();
    }
    
    if (response) {
      messageHistory.push({ role: "assistant", content: response });
      addMessage(response, "bot");
      apiErrorCount = 0;
    } else {
      throw new Error("Aucune r√©ponse de l'API Groq");
    }
  } catch (error) {
    console.error("Erreur lors de la nouvelle tentative:", error);
    if (typingIndicator && typingIndicator.parentNode) {
      typingIndicator.parentNode.remove();
    }
    handleGenericError(message);
  }
}

// Fonction pour formater le texte avec une structure acad√©mique
function formatAcademicText(text) {
  // Nettoyer le texte de tous les symboles Markdown
  let cleanedText = text
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')  // **gras** -> <strong>gras</strong>
    .replace(/\*(.*?)\*/g, '<strong>$1</strong>')       // *gras* -> <strong>gras</strong>
    .replace(/### (.*?)(\n|$)/g, '<div class="section-title">$1</div>')  // ### Titre
    .replace(/## (.*?)(\n|$)/g, '<div class="section-title">$1</div>')   // ## Titre
    .replace(/# (.*?)(\n|$)/g, '<div class="section-title">$1</div>')    // # Titre
    .replace(/---+/g, '')  // Supprimer les lignes de s√©paration
    .replace(/--/g, '')    // Supprimer les tirets doubles
    .replace(/\[(.*?)\]\((.*?)\)/g, '$1');  // [lien](url) -> lien
  
  // S√©parer le texte en paragraphes
  const paragraphs = cleanedText.split('\n\n');
  
  let formattedHTML = '';
  
  paragraphs.forEach(paragraph => {
    const trimmed = paragraph.trim();
    if (trimmed.length === 0) return;
    
    // D√©tecter les exercices et solutions
    if (trimmed.toLowerCase().includes('exercice') || trimmed.match(/exercice\s*\d+/i)) {
      formattedHTML += `<div class="exercise">${trimmed}</div>`;
    }
    else if (trimmed.toLowerCase().includes('solution') || trimmed.toLowerCase().includes('corrig√©')) {
      formattedHTML += `<div class="solution">${trimmed}</div>`;
    }
    else if (trimmed.match(/^[abcd]\)/i) || trimmed.match(/^option\s*[abcd]/i)) {
      formattedHTML += `<div class="qcm-option">${trimmed}</div>`;
    }
    else if (trimmed.toLowerCase().includes('bonne r√©ponse') || trimmed.toLowerCase().includes('correct')) {
      formattedHTML += `<div class="correct-answer">${trimmed}</div>`;
    }
    // D√©tecter les titres de sections naturels (sans symboles)
    else if (trimmed.match(/^(INTRODUCTION|Introduction|INTRODUCTION:|Introduction:|CONCLUSION|Conclusion|CONCLUSION:|Conclusion:|I\.|II\.|III\.|IV\.|V\.|1\.|2\.|3\.|4\.|5\.|‚Ä¢|Exemple|EXEMPLE)/i)) {
      if (trimmed.toLowerCase().includes('introduction')) {
        formattedHTML += `<div class="introduction">${trimmed}</div>`;
      } else if (trimmed.toLowerCase().includes('conclusion')) {
        formattedHTML += `<div class="conclusion">${trimmed}</div>`;
      } else if (trimmed.match(/^[IVX]+\./)) {
        formattedHTML += `<div class="main-point"><div class="main-point-title">${trimmed}</div></div>`;
      } else if (trimmed.match(/^[0-9]+\./)) {
        formattedHTML += `<div class="sub-point"><span class="sub-point-title">${trimmed}</span></div>`;
      } else if (trimmed.startsWith('‚Ä¢')) {
        formattedHTML += `<div class="sub-point">${trimmed}</div>`;
      } else if (trimmed.toLowerCase().includes('exemple')) {
        formattedHTML += `<div class="example">${trimmed}</div>`;
      } else {
        formattedHTML += `<p>${trimmed}</p>`;
      }
    } 
    // D√©tecter les exemples
    else if (trimmed.toLowerCase().includes('exemple') || trimmed.toLowerCase().includes('par exemple')) {
      formattedHTML += `<div class="example">${trimmed}</div>`;
    }
    // D√©tecter les titres naturels (sans symboles Markdown)
    else if (trimmed.endsWith(':') && trimmed.length < 50 && !trimmed.includes(' ')) {
      formattedHTML += `<div class="section-title">${trimmed}</div>`;
    }
    else {
      formattedHTML += `<p>${trimmed}</p>`;
    }
  });
  
  return formattedHTML;
}

// Fonction pour ajouter un indicateur de frappe
function addTypingIndicator() {
  const msg = document.createElement("div");
  msg.classList.add("message", "bot");
  
  const content = document.createElement("div");
  content.classList.add("bot-message-content");
  
  const typingIndicator = document.createElement("span");
  typingIndicator.classList.add("typing-indicator");
  typingIndicator.innerHTML = '<span class="typing-dot"></span><span class="typing-dot"></span><span class="typing-dot"></span>';
  
  content.appendChild(typingIndicator);
  msg.appendChild(content);
  chatMessages.appendChild(msg);
  scrollToBottom();
  
  return typingIndicator;
}

// Fonction pour ajuster automatiquement la hauteur du textarea
messageInput.addEventListener("input", function() {
  this.style.height = "auto";
  this.style.height = (this.scrollHeight) + "px";
});

// Fonction pour r√©initialiser la hauteur du textarea
function resetTextareaHeight() {
  messageInput.style.height = "auto";
}

// Fonction pour afficher un fichier dans la conversation
function displayFile(file) {
  const preview = document.createElement("div");
  preview.classList.add("message", "user", "file-preview");

  // Obtenir l'ic√¥ne appropri√©e selon le type de fichier
  const fileIcon = getFileIcon(file.type);
  
  if (file.type.startsWith("image/")) {
    // Convertir l'image en base64
    const reader = new FileReader();
    reader.onload = function(e) {
      const imgContainer = document.createElement("div");
      imgContainer.classList.add("file-preview-container");
      
      const img = document.createElement("img");
      img.src = e.target.result;
      img.style.maxWidth = "120px";
      img.style.borderRadius = "8px";
      imgContainer.appendChild(img);
      
      const fileInfo = createFileInfo(file, fileIcon);
      imgContainer.appendChild(fileInfo);
      
      preview.appendChild(imgContainer);
      chatMessages.appendChild(preview);
      scrollToBottom();
    };
    reader.readAsDataURL(file);
  } else {
    // Pour les autres types de fichiers
    const reader = new FileReader();
    reader.onload = function(e) {
      const fileContainer = document.createElement("div");
      fileContainer.classList.add("file-preview-container");
      
      const fileIconElement = document.createElement("div");
      fileIconElement.innerHTML = fileIcon;
      fileIconElement.style.fontSize = "36px";
      fileIconElement.style.textAlign = "center";
      fileIconElement.style.marginBottom = "8px";
      fileContainer.appendChild(fileIconElement);
      
      const fileInfo = createFileInfo(file, fileIcon);
      fileInfo.style.textAlign = "center";
      fileContainer.appendChild(fileInfo);
      
      preview.appendChild(fileContainer);
      chatMessages.appendChild(preview);
      scrollToBottom();
    };
    reader.readAsDataURL(file);
  }
}

// Fonction pour cr√©er l'information du fichier
function createFileInfo(file, icon) {
  const fileInfo = document.createElement("div");
  fileInfo.classList.add("file-item");
  
  const iconSpan = document.createElement("span");
  iconSpan.classList.add("file-icon");
  iconSpan.textContent = icon;
  
  const nameSpan = document.createElement("span");
  nameSpan.classList.add("file-name");
  nameSpan.textContent = file.name;
  nameSpan.style.fontSize = "12px";
  
  const sizeSpan = document.createElement("span");
  sizeSpan.classList.add("file-size");
  sizeSpan.textContent = formatFileSize(file.size);
  sizeSpan.style.fontSize = "10px";
  
  fileInfo.appendChild(iconSpan);
  fileInfo.appendChild(nameSpan);
  fileInfo.appendChild(sizeSpan);
  
  return fileInfo;
}

// Fonction pour obtenir l'ic√¥ne appropri√©e selon le type de fichier
function getFileIcon(fileType) {
  if (fileType.startsWith("image/")) return "üñºÔ∏è";
  if (fileType.startsWith("audio/")) return "üéµ";
  if (fileType === "application/pdf") return "üìï";
  if (fileType.includes("word") || fileType === "application/msword" || fileType === "application/vnd.openxmlformats-officedocument.wordprocessingml.document") return "üìÑ";
  if (fileType.includes("excel") || fileType === "application/vnd.ms-excel" || fileType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") return "üìä";
  if (fileType.includes("powerpoint") || fileType === "application/vnd.ms-powerpoint" || fileType === "application/vnd.openxmlformats-officedocument.presentationml.presentation") return "üìë";
  if (fileType.includes("text/plain")) return "üìù";
  return "üìé";
}

// Fonction pour formater la taille du fichier
function formatFileSize(bytes) {
  if (bytes === 0) return "0 Bytes";
  const k = 1024;
  const sizes = ["Bytes", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
}

// Fonction pour ajouter un message texte
function addMessage(text, sender) {
  const msg = document.createElement("div");
  msg.classList.add("message", sender);
  
  if (sender === "bot") {
    const content = document.createElement("div");
    content.classList.add("bot-message-content");
    // Utiliser innerHTML pour permettre le formatage acad√©mique
    content.innerHTML = formatAcademicText(text);
    msg.appendChild(content);
  } else {
    msg.textContent = text;
  }
  
  chatMessages.appendChild(msg);
  scrollToBottom();
}

// FONCTION SCROLLTOBOTTON AM√âLIOR√âE - CORRECTION CRITIQUE
function scrollToBottom() {
  setTimeout(() => {
    // Scroll jusqu'en bas du conteneur
    chatMessages.scrollTop = chatMessages.scrollHeight;
    
    // V√©rification suppl√©mentaire apr√®s un court d√©lai
    setTimeout(() => {
      const currentScroll = chatMessages.scrollTop;
      const maxScroll = chatMessages.scrollHeight - chatMessages.clientHeight;
      
      // Si nous ne sommes pas tout en bas, forcer le scroll
      if (currentScroll < maxScroll - 50) {
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    }, 150);
  }, 100);
}

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', function() {
  console.log("Professeur ClassePro initialis√© avec API Groq et LLaMA 4 Scout");
  
  // üîÑ INITIALISER L'AFFICHAGE DU FORFAIT
  mettreAJourAffichageForfait();
  
  // S√©lectionner le premier bouton par d√©faut
  document.querySelector('.task-btn').classList.add('active');
  
  // Forcer le scroll vers le bas au chargement initial
  setTimeout(scrollToBottom, 500);
});
